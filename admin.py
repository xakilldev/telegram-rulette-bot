import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
import storage
from config import ADMIN_IDS

logger = logging.getLogger(__name__)

async def give_attempts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_user = update.effective_user
    logger.info(f"–ê–¥–º–∏–Ω {admin_user.id} –≤—ã–∑–≤–∞–ª /give —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {context.args}")

    if len(context.args) != 2:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/give <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`", parse_mode=ParseMode.MARKDOWN)
        return

    try:
        target_user_id = int(context.args[0])
        amount = int(context.args[1])
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: `user_id` –∏ `–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ` –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.", parse_mode=ParseMode.MARKDOWN)
        return

    target_user_data = storage.get_user(target_user_id)
    target_username = target_user_data.get("username", f"ID: {target_user_id}")

    await storage.add_attempts(target_user_id, amount)
    await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {amount} –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username} ({target_user_id}).")

    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount} –ø–æ–ø—ã—Ç–æ–∫!"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")


async def take_attempts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_user = update.effective_user
    logger.info(f"–ê–¥–º–∏–Ω {admin_user.id} –≤—ã–∑–≤–∞–ª /take —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {context.args}")

    if len(context.args) != 2:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/take <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`", parse_mode=ParseMode.MARKDOWN)
        return

    try:
        target_user_id = int(context.args[0])
        amount = int(context.args[1])
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: `user_id` –∏ `–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ` –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.", parse_mode=ParseMode.MARKDOWN)
        return

    target_user_data = storage.get_user(target_user_id)
    target_username = target_user_data.get("username", f"ID: {target_user_id}")
    current_attempts = target_user_data.get("attempts", 0)

    if current_attempts == 0:
         await update.message.reply_text(f"‚ö† –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} ({target_user_id}) –∏ —Ç–∞–∫ 0 –ø–æ–ø—ã—Ç–æ–∫.")
         return

    taken_amount = min(amount, current_attempts)

    await storage.take_attempts(target_user_id, amount)
    await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–Ω–æ {taken_amount} –ø–æ–ø—ã—Ç–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} ({target_user_id}).")

    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"‚ö† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±—Ä–∞–ª —É –≤–∞—Å {taken_amount} –ø–æ–ø—ã—Ç–æ–∫."
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑—ä—è—Ç–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")


async def reset_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_user = update.effective_user
    logger.info(f"–ê–¥–º–∏–Ω {admin_user.id} –≤—ã–∑–≤–∞–ª /reset —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {context.args}")

    if len(context.args) != 1:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reset <user_id>`", parse_mode=ParseMode.MARKDOWN)
        return

    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: `user_id` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.", parse_mode=ParseMode.MARKDOWN)
        return

    target_user_data = storage.get_user(target_user_id)
    target_username = target_user_data.get("username", f"ID: {target_user_id}")

    await storage.reset_user(target_user_id)
    await update.message.reply_text(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} ({target_user_id}) —Å–±—Ä–æ—à–µ–Ω—ã (—Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –µ—Å–ª–∏ –±—ã–ª).")


async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_user = update.effective_user
    logger.info(f"–ê–¥–º–∏–Ω {admin_user.id} –≤—ã–∑–≤–∞–ª /ban —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {context.args}")

    if len(context.args) != 1:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/ban <user_id>`", parse_mode=ParseMode.MARKDOWN)
        return

    try:
        target_user_id = int(context.args[0])
        if target_user_id in ADMIN_IDS:
             await update.message.reply_text("‚õî –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
             return
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: `user_id` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.", parse_mode=ParseMode.MARKDOWN)
        return

    target_user_data = storage.get_user(target_user_id)
    target_username = target_user_data.get("username", f"ID: {target_user_id}")

    if storage.is_user_banned(target_user_id):
        await update.message.reply_text(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} ({target_user_id}) —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
    else:
        await storage.ban_user(target_user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} ({target_user_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.")


async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_user = update.effective_user
    logger.info(f"–ê–¥–º–∏–Ω {admin_user.id} –≤—ã–∑–≤–∞–ª /unban —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {context.args}")

    if len(context.args) != 1:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/unban <user_id>`", parse_mode=ParseMode.MARKDOWN)
        return

    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: `user_id` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.", parse_mode=ParseMode.MARKDOWN)
        return

    target_user_data = storage.get_user(target_user_id)
    target_username = target_user_data.get("username", f"ID: {target_user_id}")

    if not storage.is_user_banned(target_user_id):
        await update.message.reply_text(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} ({target_user_id}) –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
    else:
        await storage.unban_user(target_user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} ({target_user_id}) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.")


async def view_pending_claims(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_user = update.effective_user
    logger.info(f"–ê–¥–º–∏–Ω {admin_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ /claims")

    pending_claims = storage.get_pending_claims()

    if not pending_claims:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–∑–æ–≤.")
        return

    response_text = "‚è≥ **–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:**\n\n"
    keyboard_buttons = []

    for claim in pending_claims:
        user_id = claim['user_id']
        username = claim['username']
        win_index = claim['win_index']
        prize = claim['prize']
        request_time_str = claim.get('request_time', 'N/A')
        try:
            request_time_dt = datetime.fromisoformat(request_time_str)
            request_time_formatted = request_time_dt.strftime('%Y-%m-%d %H:%M')
        except (ValueError, TypeError):
            request_time_formatted = "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞"

        response_text += (
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username} (`{user_id}`)\n"
            f"üéÅ **–ü—Ä–∏–∑:** {prize}\n"
            f"üóìÔ∏è **–ó–∞–ø—Ä–æ—à–µ–Ω–æ:** {request_time_formatted}\n"
            f"üîë **ID –∑–∞—è–≤–∫–∏ (–¥–ª—è –∫–Ω–æ–ø–∫–∏):** `{user_id}_{win_index}`\n\n"
        )
        callback_data = f"admin_confirm_claim_{user_id}_{win_index}"
        keyboard_buttons.append([
            InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–ª—è {username} ({prize})", callback_data=callback_data)
        ])

    reply_markup = InlineKeyboardMarkup(keyboard_buttons) if keyboard_buttons else None
    await update.message.reply_text(response_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def handle_confirm_claim_button(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id_to_confirm: int, win_index_to_confirm: int):
    query = update.callback_query
    admin_user = query.from_user
    logger.info(f"–ê–¥–º–∏–Ω {admin_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ user={user_id_to_confirm}, index={win_index_to_confirm}")

    success, message, target_username = await storage.confirm_claim(admin_user.id, user_id_to_confirm, win_index_to_confirm)

    if success:
        prize_name = message
        await query.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–ª—è {target_username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        await query.edit_message_text(f"{query.message.text}\n\n---\n‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ '{prize_name}' –¥–ª—è {target_username} (`{user_id_to_confirm}`) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤–∞–º–∏.",
                                      reply_markup=None)

        try:
            from config import CLAIM_CONFIRMED_USER_TEXT
            await context.bot.send_message(
                chat_id=user_id_to_confirm,
                text=CLAIM_CONFIRMED_USER_TEXT.format(prize=prize_name)
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_confirm}: {e}")
    else:
        await query.answer(f"‚ö†Ô∏è {message}", show_alert=True)
        await query.edit_message_text(f"{query.message.text}\n\n---\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É user={user_id_to_confirm}, index={win_index_to_confirm}. –ü—Ä–∏—á–∏–Ω–∞: {message}")