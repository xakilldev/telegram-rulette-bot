import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from telegram.constants import ParseMode
from telegram.error import BadRequest
import storage
import roulette
import admin
from config import (
    WELCOME_TEXT, PRICE_PER_ATTEMPT, ADMIN_IDS, PURCHASE_PROMPT_TEXT,
    CLAIM_REQUEST_TEXT, PAYMENT_CHECK_TEXT, PAYMENT_SUCCESS_TEXT,
    PAYMENT_FAILED_TEXT, PAYMENT_PENDING_TEXT
)

def get_crypto_pay_client(context: ContextTypes.DEFAULT_TYPE):
    return context.bot_data.get('crypto_pay')

logger = logging.getLogger(__name__)

def create_main_keyboard(user_id: int) -> InlineKeyboardMarkup:
    unclaimed_prizes = storage.get_unclaimed_prizes(user_id)
    claim_button = []
    if unclaimed_prizes:
        claim_button = [InlineKeyboardButton("üèÜ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–∑", callback_data="claim_options")]

    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        claim_button,
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="buy_options")],
        [InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å! üé∞", callback_data="spin_roulette")]
    ]
    keyboard = [row for row in keyboard if row]
    return InlineKeyboardMarkup(keyboard)

def create_buy_options_keyboard() -> InlineKeyboardMarkup:
    options = [1, 5, 10]
    currency = PRICE_PER_ATTEMPT['currency']
    base_price = PRICE_PER_ATTEMPT['amount']
    keyboard = []
    for count in options:
        price = round(base_price * count, 4)
        keyboard.append([
            InlineKeyboardButton(
                f"{count} –ø–æ–ø—ã—Ç{'–∫–∞' if count == 1 else ('–∫–∏' if count < 5 else '–æ–∫')} (~{price} {currency})",
                callback_data=f"confirm_buy_{count}"
            )
        ])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

def create_claim_options_keyboard(user_id: int) -> InlineKeyboardMarkup:
    unclaimed_prizes = storage.get_unclaimed_prizes(user_id)
    keyboard = []
    if not unclaimed_prizes:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])

    for index, win_data in unclaimed_prizes[:5]:
        prize_name = win_data.get('prize', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–∑')
        try:
            win_time = datetime.fromisoformat(win_data['timestamp']).strftime('%d.%m %H:%M')
            button_text = f"'{prize_name}' ({win_time})"
        except:
            button_text = f"'{prize_name}'"

        keyboard.append([
            InlineKeyboardButton(button_text, callback_data=f"request_claim_{index}")
        ])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or user.first_name

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")

    storage.get_user(user_id)
    storage.update_user_username(user_id, user.username)

    if storage.is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        logger.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start.")
        return

    keyboard = create_main_keyboard(user_id)
    await update.message.reply_text(
        WELCOME_TEXT,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    user_id = user.id
    data = query.data

    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.username}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")

    if storage.is_user_banned(user_id) and not data.startswith("admin_"):
        await query.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        logger.warning(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É {data}.")
        return

    if data == "back_to_main":
        keyboard = create_main_keyboard(user_id)
        try:
            await query.edit_message_text(WELCOME_TEXT, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª. –º–µ–Ω—é –¥–ª—è {user_id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await context.bot.send_message(user_id, WELCOME_TEXT, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

    elif data == "show_stats":
        stats_text = storage.get_user_stats(user_id)
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        try:
            await query.edit_message_text(stats_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        except BadRequest as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {user_id}: {e}.")
             await context.bot.send_message(user_id, stats_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

    elif data == "spin_roulette":
        await roulette.spin_roulette(update, context)

    elif data == "buy_options":
        keyboard = create_buy_options_keyboard()
        try:
            await query.edit_message_text(PURCHASE_PROMPT_TEXT, reply_markup=keyboard)
        except BadRequest as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {user_id}: {e}.")
             await context.bot.send_message(user_id, PURCHASE_PROMPT_TEXT, reply_markup=keyboard)

    elif data.startswith("confirm_buy_"):
        try:
            attempts_to_buy = int(data.split("_")[2])
            if attempts_to_buy <= 0: raise ValueError
        except (IndexError, ValueError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {data} –æ—Ç {user_id}")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫.")
            return

        crypto_pay = get_crypto_pay_client(context)
        if not crypto_pay:
            logger.error("Crypto Pay –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ bot_data!")
            await query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        currency = PRICE_PER_ATTEMPT['currency']
        amount = round(PRICE_PER_ATTEMPT['amount'] * attempts_to_buy, 8)

        try:
            payload_data = f"{user_id}_{attempts_to_buy}"
            invoice = await crypto_pay.create_invoice(
                asset=currency,
                amount=amount,
                description=f"–ü–æ–∫—É–ø–∫–∞ {attempts_to_buy} –ø–æ–ø—ã—Ç–æ–∫ –≤ –†—É–ª–µ—Ç–∫–µ –£–¥–∞—á–∏",
                payload=payload_data,
            )

            if not invoice or 'invoice_id' not in invoice or 'pay_url' not in invoice:
                 raise Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Crypto Pay API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞.")

            invoice_id = invoice['invoice_id']
            pay_url = invoice['pay_url']

            await storage.add_pending_invoice(user_id, invoice_id, amount, currency, attempts_to_buy)

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)],
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_payment_{invoice_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
            ])
            await query.edit_message_text(
                f"üßæ –í–∞—à —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É {amount} {currency} –∑–∞ {attempts_to_buy} –ø–æ–ø—ã—Ç{'–æ–∫' if attempts_to_buy > 4 else '–∫–∏'}:\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.",
                reply_markup=keyboard
            )
            logger.info(f"–°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å {invoice_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {attempts_to_buy} –ø–æ–ø—ã—Ç–æ–∫ ({amount} {currency}).")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ Crypto Pay –¥–ª—è {user_id}: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

    elif data.startswith("check_payment_"):
        try:
            invoice_id = int(data.split("_")[2])
        except (IndexError, ValueError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {data} –æ—Ç {user_id}")
            return

        crypto_pay = get_crypto_pay_client(context)
        if not crypto_pay:
            logger.error("Crypto Pay –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ bot_data!")
            await query.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂.")
            return

        invoice_data = storage.get_pending_invoice_data(user_id, invoice_id)
        if not invoice_data:
             logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å {invoice_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
             await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Å—á–µ—Ç–µ.", show_alert=True)
             keyboard = create_main_keyboard(user_id)
             await query.edit_message_text(WELCOME_TEXT, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
             return

        await query.answer(PAYMENT_CHECK_TEXT)

        try:
            invoices = await crypto_pay.get_invoices(invoice_ids=[invoice_id])
            if invoices and invoices[0].status == 'paid':
                logger.info(f"–ò–Ω–≤–æ–π—Å {invoice_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π.")
                attempts_to_add = invoice_data['attempts']
                await storage.add_attempts(user_id, attempts_to_add)
                await storage.remove_pending_invoice(user_id, invoice_id)
                keyboard = create_main_keyboard(user_id)
                await query.edit_message_text(
                    PAYMENT_SUCCESS_TEXT.format(count=attempts_to_add),
                    reply_markup=keyboard
                )

            elif invoices and invoices[0].status == 'expired':
                logger.warning(f"–ò–Ω–≤–æ–π—Å {invoice_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫.")
                await storage.remove_pending_invoice(user_id, invoice_id)
                keyboard = create_main_keyboard(user_id)
                await query.edit_message_text(
                     f"‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞ {invoice_id} –∏—Å—Ç–µ–∫.",
                     reply_markup=keyboard
                )
            else:
                logger.info(f"–ò–Ω–≤–æ–π—Å {invoice_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: {invoices[0].status if invoices else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}).")
                pay_url = invoices[0].pay_url if invoices else "#"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment_{invoice_id}")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
                ])
                await query.edit_message_text(
                    f"{query.message.text}\n\n{PAYMENT_PENDING_TEXT}",
                    reply_markup=keyboard
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–æ–π—Å–∞ {invoice_id} –¥–ª—è {user_id}: {e}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            keyboard = InlineKeyboardMarkup([
                 [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment_{invoice_id}")],
                 [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
            await query.edit_message_reply_markup(reply_markup=keyboard)

    elif data == "claim_options":
        keyboard = create_claim_options_keyboard(user_id)
        unclaimed_count = len(storage.get_unclaimed_prizes(user_id))
        text = "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:" if unclaimed_count > 0 else "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞."
        try:
            await query.edit_message_text(text, reply_markup=keyboard)
        except BadRequest as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–∑–æ–≤ –¥–ª—è {user_id}: {e}.")
             await context.bot.send_message(user_id, text, reply_markup=keyboard)

    elif data.startswith("request_claim_"):
        try:
            win_index = int(data.split("_")[2])
        except (IndexError, ValueError):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–∑–∞: {data} –æ—Ç {user_id}")
            return

        prize_name = await storage.request_claim(user_id, win_index)

        if prize_name:
            await query.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
            keyboard = create_main_keyboard(user_id)
            user_info = storage.get_user(user_id)
            username = user_info.get('username', f"`{user_id}`")

            admin_message = (f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–∑–∞!\n"
                             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (`{user_id}`)\n"
                             f"üéÅ –ü—Ä–∏–∑: {prize_name}\n"
                             f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /claims")
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(admin_id, admin_message, parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} –æ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏–∑–∞: {e}")

            try:
                await query.edit_message_text(
                    CLAIM_REQUEST_TEXT.format(prize=prize_name) + "\n\n" + WELCOME_TEXT,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            except BadRequest as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–∑–∞ –¥–ª—è {user_id}: {e}")
                await context.bot.send_message(user_id, CLAIM_REQUEST_TEXT.format(prize=prize_name))
                await context.bot.send_message(user_id, WELCOME_TEXT, reply_markup=create_main_keyboard(user_id), parse_mode=ParseMode.MARKDOWN)

        else:
            await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–∑ —É–∂–µ –∑–∞–ø—Ä–æ—à–µ–Ω –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω.", show_alert=True)
            keyboard = create_main_keyboard(user_id)
            try:
                 await query.edit_message_reply_markup(reply_markup=keyboard)
            except BadRequest:
                 pass

    elif data.startswith("admin_confirm_claim_"):
         if user_id not in ADMIN_IDS:
              await query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
              logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (–Ω–µ –∞–¥–º–∏–Ω) –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫—É—é –∫–Ω–æ–ø–∫—É: {data}")
              return
         try:
              parts = data.split("_")
              user_id_to_confirm = int(parts[3])
              win_index_to_confirm = int(parts[4])
              await admin.handle_confirm_claim_button(update, context, user_id_to_confirm, win_index_to_confirm)
         except (IndexError, ValueError):
              logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º: {data}")
              await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)

    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data '{data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")